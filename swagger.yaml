openapi: 3.0.0
info:
  title: Messaging Service API
  description: API for a messaging microservice, supporting personal and group chats along with media file handling.
  version: 1.0.1
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/EZAYNULLIN/messenger/1.0.1
  - url: 'https://api.messagingapp.com/v1'
    description: Main production server
paths:
  /auth/login:
    post:
      summary: Authenticate a user
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successfully authenticated, token returned
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
        '401':
          description: Authentication failed

  /users:
    post:
      summary: Register a new user
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                password:
                  type: string
                  format: password
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userId:
                    type: string
                  username:
                    type: string
      '400':
          description: Invalid request parameters
    get:
      summary: Retrieve users based on filter criteria
      tags:
        - Users
      parameters:
        - in: query
          name: username
          schema:
            type: string
          description: Username to filter users by
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of results
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for pagination
        - in: query
          name: from_ts
          schema:
            type: string
          description: Start timestamp for filtering messages
        - in: query
          name: to_ts
          schema:
            type: string
          description: End timestamp for filtering messages
      responses:
        '200':
          description: List of users matching the criteria
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    userId:
                      type: string
                    username:
                      type: string

        '404':
          description: No users found matching the criteria
        '400':
          description: Invalid query parameters

  /users/contacts:
    post:
      summary: Add a new contact by username
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                contactUsername:
                  type: string
      responses:
        '201':
          description: Contact added successfully
        '404':
          description: No user found with provided user ID
        '400':
          description: Invalid user ID format
        '403':
          description: Unauthorized to add contacts
    get:
      summary: Retrieve a user's contacts
      tags:
        - Users
      responses:
        '200':
          description: List of user contacts
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    username:
                      type: string
        '400':
          description: Invalid request data

  /users/profile:
    put:
      summary: Edit user profile details
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                description:
                  type: string
                avatarUrl:
                  type: string
      responses:
        '200':
          description: Profile updated successfully
        '400':
          description: Invalid request data

  /users/{username}/profile:
    get:
      summary: Retrieve a user's profile information
      tags:
        - Users
      parameters:
        - in: path
          name: username
          required: true
          schema:
            type: string
          description: Username whose profile is being retrieved
      responses:
        '200':
          description: Profile information retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  description:
                    type: string
                  avatarUrl:
                    type: string
        '404':
          description: User not found
        '400':
          description: Invalid request data

  /messages/user/{userId}:
    post:
      summary: Send a personal message to a user
      tags:
        - Messages
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        '202':
          description: Message sent successfully
        '400':
          description: Invalid request data

  /messages/group/{groupId}:
    post:
      summary: Send a message to a group
      tags:
        - Messages
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                message:
                  type: string
      responses:
        '202':
          description: Message sent to group successfully
        '400':
          description: Invalid request data

  /messages:
    get:
      summary: Retrieve personal messages
      tags:
        - Messages
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of results
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for pagination
        - in: query
          name: from_ts
          schema:
            type: string
          description: Start timestamp for filtering messages
        - in: query
          name: to_ts
          schema:
            type: string
          description: End timestamp for filtering messages
      responses:
        '200':
          description: List of personal messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    messageId:
                      type: string
                    senderId:
                      type: string
                    receiverId:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
        '400':
          description: Invalid request data

  /messages/group/:
    get:
      summary: Retrieve messages from a group
      tags:
        - Messages
      parameters:
        - in: query
          name: groupId
          required: true
          schema:
            type: string
          description: Group ID for which messages are retrieved
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of results
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for pagination
        - in: query
          name: from_ts
          schema:
            type: string
          description: Start timestamp for filtering messages
        - in: query
          name: to_ts
          schema:
            type: string
          description: End timestamp for filtering messages
      responses:
        '200':
          description: List of group messages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    messageId:
                      type: string
                    senderId:
                      type: string
                    message:
                      type: string
                    timestamp:
                      type: string
        '400':
          description: Invalid request parameters

  /messages/user/{userId}/file:
    post:
      summary: Send a media file to a user
      tags:
        - Messages
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Media file sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  mediaId:
                    type: string
        '400':
          description: Invalid request data

  /messages/group/{groupId}/file:
    post:
      summary: Send a media file to a group
      tags:
        - Messages
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
      responses:
        '202':
          description: Media file sent successfully
        '400':
          description: Invalid request data

  /messages/file:
    get:
      summary: Retrieve media files from messages
      tags:
        - Messages
      parameters:
        - in: query
          name: userId
          required: true
          schema:
            type: string
          description: User ID associated with the files
        - in: query
          name: limit
          schema:
            type: integer
          description: Limit the number of results
        - in: query
          name: offset
          schema:
            type: integer
          description: Offset for pagination
        - in: query
          name: from_ts
          schema:
            type: string
          description: Start timestamp for filtering files
        - in: query
          name: to_ts
          schema:
            type: string
          description: End timestamp for filtering files
      responses:
        '200':
          description: List of received media files
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    fileId:
                      type: string
                    senderId:
                      type: string
                    fileUrl:
                      type: string
                    timestamp:
                      type: string
        '400':
          description: Invalid request data

  /groups:
    post:
      summary: Create a new group
      tags:
        - Groups
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                description:
                  type: string
      responses:
        '201':
          description: Group created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                  name:
                    type: string
                  description:
                    type: string
        '400':
          description: Invalid request parameters
        '403':
          description: Unauthorized

  /groups/{groupId}/users:
    post:
      summary: Add a user to a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: Group ID to add the user to
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                userId:
                  type: string
      responses:
        '201':
          description: User added to group successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  groupId:
                    type: string
                  userId:
                    type: string
        '400':
          description: Invalid request parameters
        '403':
          description: Unauthorized
        '404':
          description: Group or user not found

  /groups/{groupId}:
    delete:
      summary: Delete a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: Group ID to delete
      responses:
        '200':
          description: Group deleted successfully
        '403':
          description: Unauthorized
        '404':
          description: Group not found

  /groups/{groupId}/users/{userId}:
    delete:
      summary: Remove a user from a group
      tags:
        - Groups
      parameters:
        - in: path
          name: groupId
          required: true
          schema:
            type: string
          description: Group ID from which the user will be removed
        - in: path
          name: userId
          required: true
          schema:
            type: string
          description: User ID to remove from the group
      responses:
        '200':
          description: User removed from group successfully
        '400':
          description: Invalid request parameters
        '403':
          description: Unauthorized
        '404':
          description: Group or user not found

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
security:
  - bearerAuth: []